using System;
using System.Collections.Generic;
using System.IO;
using CombineFiles.ConsoleApp.Infrastructure;

namespace CombineFiles.ConsoleApp.Helpers
{
    public static class FileFilterHelper
    {
        /// <summary>
        /// Filtra la lista di file in base a MinDate, MaxDate, MinSize, MaxSize.
        /// </summary>
        public static List<string> FilterByDateAndSize(List<string> files, CombineFilesOptions options, Logger logger)
        {
            long minSize = string.IsNullOrWhiteSpace(options.MinSize)
                ? 0
                : FileHelper.ConvertSizeToBytes(options.MinSize);

            long maxSize = string.IsNullOrWhiteSpace(options.MaxSize)
                ? long.MaxValue
                : FileHelper.ConvertSizeToBytes(options.MaxSize);

            DateTime? minDate = options.MinDate;
            DateTime? maxDate = options.MaxDate;

            var filtered = new List<string>();

            foreach (var f in files)
            {
                try
                {
                    var info = new FileInfo(f);

                    bool sizeOk = info.Length >= minSize && info.Length <= maxSize;
                    bool dateOk = (!minDate.HasValue || info.LastWriteTime >= minDate.Value)
                                  && (!maxDate.HasValue || info.LastWriteTime <= maxDate.Value);

                    if (sizeOk && dateOk)
                        filtered.Add(f);
                }
                catch (Exception ex)
                {
                    logger.WriteLog($"Errore nell'accesso a {f}: {ex.Message}", "WARNING");
                }
            }

            logger.WriteLog($"File rimasti dopo filtro date/dimensioni: {filtered.Count}", "INFO");
            return filtered;
        }

        /// <summary>
        /// Ritorna true se il file contiene la stringa "auto-generated", false altrimenti.
        /// </summary>
        public static bool FileContainsAutoGenerated(string filePath, Logger logger)
        {
            try
            {
                var lines = File.ReadAllLines(filePath);
                foreach (var line in lines)
                {
                    if (line.Contains("<auto-generated>"))
                    {
                        logger.WriteLog($"File escluso per contenuto auto-generated: {filePath}", "INFO");
                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
                logger.WriteLog($"Impossibile controllare 'auto-generated' su {filePath}: {ex.Message}", "WARNING");
            }
            return false;
        }
    }
}